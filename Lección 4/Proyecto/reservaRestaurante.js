/*
  üìå Pr√°ctica 4. Introducci√≥n a Flexbox
  Sistema de Reservas para un Restaurante
*/

/*
    Objetivo

Construir un sistema de reservas utilizando **promesas** y **`async/await`**, con manejo de errores adecuado.


Problema: Sistema de Reservas para un Restaurante
Imagina que tienes un restaurante y deseas permitir a los clientes hacer reservas en l√≠nea. Para ello, el sistema
debe hacer las siguientes acciones:
1. Verificar si hay mesas disponibles para el d√≠a y la hora solicitados.
2. Si las mesas est√°n disponibles, confirmar la reserva.
3. Si todo est√° bien, enviar un correo de confirmaci√≥n.
4. Manejar adecuadamente los errores (si no hay mesas disponibles o si hay un fallo en el env√≠o del correo).


  // üìå C√≥digo base

// Aqu√≠ tienes un c√≥digo incompleto para tomar como base. Cada funci√≥n est√° definida, pero los pasos cruciales a√∫n no est√°n implementados.

// Simulando una base de datos de mesas
const mesasDisponibles = 5;  // N√∫mero de mesas disponibles para reservar

// Funci√≥n que simula la verificaci√≥n de disponibilidad de mesas
function verificarDisponibilidad(mesasSolicitadas) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      // Completa la l√≥gica aqu√≠: Si hay suficientes mesas disponibles, resuelve la promesa, 
      // de lo contrario, rech√°zala con un mensaje adecuado.
    }, 2000);  // Simula un retraso en la verificaci√≥n (2 segundos)
  });
}

// Funci√≥n que simula el env√≠o de un correo de confirmaci√≥n
function enviarConfirmacionReserva(nombreCliente) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      // Completa la l√≥gica aqu√≠: Simula un env√≠o de correo. Usa Math.random() 
      // para simular si el correo se envi√≥ correctamente o si ocurri√≥ un error.
    }, 1500);  // Simula el env√≠o de un correo (1.5 segundos)
  });
}

// Funci√≥n principal para manejar una reserva
async function hacerReserva(nombreCliente, mesasSolicitadas) {
  try {
    console.log("Verificando disponibilidad de mesas...");
    const disponibilidad = await verificarDisponibilidad(mesasSolicitadas);  // Llama a la funci√≥n de verificaci√≥n
    
    // Completa el flujo aqu√≠: Si hay mesas disponibles, llama a la funci√≥n para enviar la confirmaci√≥n.
    // Si no hay mesas disponibles o si ocurre un error, captura el error.
  } catch (error) {
    console.log("Error:", error);  // Maneja los errores en la promesa
  }
}

// Llamada de prueba
hacerReserva("Juan P√©rez", 3);  // Intenta hacer una reserva para 3 personas
*/


// Aqu√≠ tienes un c√≥digo incompleto para tomar como base. Cada funci√≥n est√° definida, pero los pasos cruciales a√∫n no est√°n implementados.

// Simulando una base de datos de mesas
const mesasDisponibles = 5;  // N√∫mero de mesas disponibles para reservar
const mensaje = document.getElementById("mensaje");

// 1. Funci√≥n que simula la verificaci√≥n de disponibilidad de mesas
function verificarDisponibilidad(mesasSolicitadas) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      // Completa la l√≥gica aqu√≠: Si hay suficientes mesas disponibles, resuelve la promesa, 
      // de lo contrario, rech√°zala con un mensaje adecuado.
      if (mesasSolicitadas <= mesasDisponibles) {
        resolve(`¬°Mesas disponibles! ‚úÖ`);
      } else {
        reject(`No hay suficientes mesas disponibles.`)
      }
    }, 2000);  // Simula un retraso en la verificaci√≥n (2 segundos)
  });
}

// 2. Funci√≥n que simula el env√≠o de un correo de confirmaci√≥n
function enviarConfirmacionReserva(nombreCliente) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      // Completa la l√≥gica aqu√≠: Simula un env√≠o de correo. Usa Math.random() 
      // para simular si el correo se envi√≥ correctamente o si ocurri√≥ un error.
      const exito = Math.random() > 0.2; // 80% de exito

      if (exito) {
        mensaje.textContent = `...`;
        resolve(`üìß Correo enviado a ${nombreCliente}.`);
      } else {
        reject(`Error al enviar correo de confirmaci√≥n.`);
      }
    }, 1500);  // Simula el env√≠o de un correo (1.5 segundos)
  });
}

// 3. Funci√≥n principal para manejar una reserva
async function hacerReserva(nombreCliente, mesasSolicitadas, fecha, hora, mesa, email) {
  try {
    mensaje.style.color = "black";
    mensaje.textContent = `Verificando disponibilidad de mesas...`;

    const disponibilidad = await verificarDisponibilidad(mesasSolicitadas);  // Llama a la funci√≥n de verificaci√≥n
    mensaje.textContent = disponibilidad;
    
    // Completa el flujo aqu√≠: Si hay mesas disponibles, llama a la funci√≥n para enviar la confirmaci√≥n.
    const confirmacion = await enviarConfirmacionReserva(nombreCliente);
    mensaje.textContent = confirmacion;

    // Aqu√≠ mostramos el mensaje con todos los datos
    setTimeout(() => {
      mensaje.innerHTML = `${confirmacion}<br>
      Reservaci√≥n "${mesa}" confirmada para ${nombreCliente} (${email}).<br>
      üìÖ ${fecha}, ${hora} horas.<br>
      üõéÔ∏è Mesas solicitadas: ${mesasSolicitadas}.<br>`;
    }, 2000);

    // Si no hay mesas disponibles o si ocurre un error, captura el error.
  } catch (error) {
    // Maneja los errores en la promesa
    mensaje.style.color = "red";
    mensaje.textContent = error;
  }
}

/*
// Llamada de prueba
hacerReserva("Juan P√©rez", 3);  // Intenta hacer una reserva para 3 personas
*/

// Conetar con form HTML
document.getElementById("form").addEventListener("submit", function (e) {
  e.preventDefault();

  const date = document.getElementById("fecha").value;
  const time = document.getElementById("hora").value;
  const number = parseInt(document.getElementById("mesas").value);
  const name = document.getElementById("nombre").value.trim();
  const email = document.getElementById("email").value.trim();
  const table = document.getElementById("mesa").value.trim();

  if (!date || !time || isNaN(number) || !name || !email || !table) {
    alert(`Por favor, completa todos los campos.`);
    return;
  }

  hacerReserva(name, number, date, time, table, email);
});
